@import '../base';
@import "compass/utilities/general/float";

@function col-width(
  $aether-columns:$aether-desktop-columns,
  $aether-grid-width:$aether-desktop-grid-width
) {
  @return (($aether-grid-width - gutter($aether-gutter-width)) - (gutter($aether-gutter-width) * $aether-columns)) / $aether-columns;
}

@function grid-width(
  $aether-columns:$aether-desktop-columns,
  $aether-grid-width:$aether-desktop-grid-width
) {
  $column-width:col-width($aether-columns,$aether-grid-width);
  @return ($column-width * $aether-columns) + (gutter($aether-gutter-width) * $aether-columns);
}

@mixin grid-classes(
  $aether-media:$aether-desktop,
  $aether-columns:$aether-desktop-columns,
  $grid-width:$aether-desktop-grid-width,
  $rtl:''
) {
  @if $rtl == '' {
    // generate column classes
    @for $n from 1 through $aether-columns {
      .g-#{$aether-media}-#{$n} {
        @include span-columns($n,$aether-columns,$grid-width);
      }
    }
  }
  @for $n from 1 through $aether-columns {
    .g-#{$aether-media}-right#{$n} {
      @if $aether-float-direction == right {
        @include span-columns($n,$aether-columns,$grid-width,left);
      } @else {
        @include span-columns($n,$aether-columns,$grid-width,right);
      }
    }
  }
  // generate offset classes
  @for $n from 1 through ($aether-columns - 1) {
    .g-#{$aether-media}-#{$aether-offset_prefix}#{$n} {
      @include offset($n,$aether-columns,$grid-width);
    }
  }

  // generate push classes
  @for $n from 1 through ($aether-columns - 1) {
    .g-#{$aether-media}-#{$aether-push_prefix}#{$n} {
      @include push($n,$aether-columns,$grid-width);
    }
  }

  // generate pull classes
  @for $n from 1 through ($aether-columns - 1) {
    .g-#{$aether-media}-#{$aether-pull_prefix}#{$n} {
      @include pull($n,$aether-columns,$grid-width);
    }
  }
}

@mixin span-columns(
  $n,
  $aether-columns:$aether-desktop-columns,
  $aether-grid-width:$aether-desktop-grid-width,
  $float-direction:''
) {
  $column-width:col-width($aether-columns,$aether-grid-width);
  $span-col-px: ($n * gutter() + $n*$column-width) - gutter();
  @if $float-direction == right {
    float: right;
  }
  @if $float-direction == left {
    float: left;
  }
  @if $aether-grid-type == fluid {
    width: percentage($span-col-px / ($aether-grid-width - gutter()));
  }
  @else {
    width: $span-col-px;
  }

}

@mixin offset(
  $n,
  $aether-columns:$aether-desktop-columns,
  $aether-grid-width:$aether-desktop-grid-width
) {
  $column-width:col-width($aether-columns,$aether-grid-width);
  $offset-left-px: $n * gutter() + $n*$column-width;
  @if $aether-grid-type == fluid {
    margin: {
      @if $aether-float-direction == right {
        right: percentage($offset-left-px / ($aether-grid-width - gutter()));
      }
      @else {
        left: percentage($offset-left-px / ($aether-grid-width - gutter()));
      }
    }
    width: 100%
  }
  @else {
    margin: {
      @if $aether-float-direction == right {
        right: $offset-left-px;
      }
      @else {
        left: $offset-left-px;
      }
    }
  }
}

@mixin push(
  $n,
  $aether-columns:$aether-desktop-columns,
  $aether-grid-width:$aether-desktop-grid-width
) {
  $column-width:col-width($aether-columns,$aether-grid-width);
  $push-left-px: ($n * gutter() + $n*$column-width) + gutter(gutter(), half);
  $push-right-px: (-$n * gutter() - $n*$column-width) + gutter($aether-gutter-width, half);
  @if $aether-grid-type == fluid {
    margin: {
      @if $aether-float-direction == right {
        right: percentage($push-left-px / ($aether-grid-width - gutter()));
        left: percentage($push-right-px / ($aether-grid-width - gutter()));
      }
      @else {
        left: percentage($push-left-px / ($aether-grid-width - gutter()));
        right: percentage($push-right-px / ($aether-grid-width - gutter()));
      }
    }
  }
  @else {
    margin: {
      @if $aether-float-direction == right {
        right: $push-left-px;
        left: $push-right-px;
      }
      @else {
        left: $push-left-px;
        right: $push-right-px;
      }
    }
  }
}

@mixin pull(
  $n,
  $aether-columns:$aether-desktop-columns,
  $aether-grid-width:$aether-desktop-grid-width
) {
  $grid-width:grid-width($aether-columns,$aether-grid-width);
  $column-width:col-width($aether-columns,$aether-grid-width);
  $pull-left-px: (-$n * gutter() - $n*$column-width) + gutter($aether-gutter-width, half);
  @if $aether-grid-type == fluid {
    margin: {
      @if $aether-float-direction == right {
        right: percentage($pull-left-px / ($aether-grid-width - gutter()));
      }
      @else {
        left: percentage($pull-left-px / ($aether-grid-width - gutter()));
      }
    }
  }
  @else {
    margin: {
      @if $aether-float-direction == right {
        right: $pull-left-px;
      }
      @else {
        left: $pull-left-px;
      }
    }
  }
}


// Zero out desktop push/pull/offset to avoid specificity problems 
// in the media class stack when moving things like sidebars around.
// This must come before column classes.
@mixin zero-classes($media:$aether-desktop,$columns:$aether-desktop-columns) {

  #{enumerate(".#{$aether-gridprefix}-#{$media}-#{$aether-offset_prefix}", 1, $columns, "")} {
    margin: {
      @if $aether-float-direction == right {
        right: 0;
      }
      @else {
        left: 0;
      }
    }
  }

  #{enumerate(".#{$aether-gridprefix}-#{$media}-#{$aether-push_prefix}", 1, $columns, "")} {
    margin: {
      left: gutter($aether-gutter-width, half);
      right: gutter($aether-gutter-width, half);
    }
  }

  #{enumerate(".#{$aether-gridprefix}-#{$media}-#{$aether-pull_prefix}", 1, $columns, "")} {
    margin: {
      @if $aether-float-direction == right {
        right: gutter($aether-gutter-width, half);
      }
      @else {
        left: gutter($aether-gutter-width, half);
      }
    }
  }

  .#{$aether-gridprefix}-#{$media}-#{$columns} {
    clear: none;
  }

}

@function gutter(
  $gutter-width: $aether-gutter-width,
  $gutter-size: '') {
  @if $gutter-size == half {
    $half-gutter: $gutter-width / 2;
    @if unit($gutter-width) == "px" {
      @return ceil($half-gutter);
    }
    @return $half-gutter;
  }
  @else {
    @return $gutter-width;
  }
}

//@function half-gutter(
//  $gutter-width: $aether-gutter-width,
//  $gutter-side: $aether-float-direction,
//  $flow-direction: $aether-float-direction
//) {
//  $half-gutter: $gutter-width / 2;
//  // Special handling in case gutter has an odd number of pixels.
//  @if unit($gutter-width) == "px" {
//    @if $gutter-side == $flow-direction {
//      @return floor($half-gutter);
//    }
//    @else {
//      @return ceil($half-gutter);
//    }
//  }
//  @return $half-gutter;
//}

@mixin grid-item-base(
  $float-direction: $aether-float-direction,
  $gutter-width: gutter(),
  $box-sizing: $aether-box-sizing
) {
  @include box-sizing($box-sizing);
  @include float($float-direction);
  margin: {
    left: gutter($aether-gutter-width, half);
    right: gutter($aether-gutter-width, half);
  }
}

@mixin container($aether-context: nested, $aether-grid-width:$aether-desktop-grid-width) {
  @include clearfix();
  @if $aether-context == 'nested' {
    margin: {
      left: gutter($aether-gutter-width,half)*-1;
      right: gutter($aether-gutter-width,half)*-1;
    }
  } 
  @else if $aether-context == 'full' {
  @if $aether-grid-type == fluid {
    width: percentage(($aether-grid-width - gutter()) / $aether-grid-width);
  }
  @else {
    width: $aether-grid-width - gutter();
  }
    margin: {
      left: gutter($aether-gutter-width,half)*1;
      right: gutter($aether-gutter-width,half)*1;
    }
  }
}

@mixin limiter(
  $aether-limiter: $aether-limiter-class,
  $aether-target: $aether-desktop-grid-width,
  $aether-context: $aether-break-wide,
  $constraint: false
) {
  .#{$aether-limiter-class} {
    margin-left: auto;
    margin-right: auto;
    @if $aether-grid-type == fluid {
      @if $constraint {
        #{$constraint}-width: $aether-target;
      }
      $target: percentage($aether-target / ($aether-context - 14px));
      @if $target >= 100% {
        width: 100%;
      }
      @else {
        width: $target;
      }
    }
    @else {
      width: $aether-target;
    }
  }
}

@mixin extend-layout(
  $extend-layout-1: $aether-desktop $aether-desktop-columns,
  $extend-layout-2: false,
  $extend-layout-3: false,
  $extend-layout-4: false,
  $extend-layout-5: false,
  $extend-layout-6: false,
  $extend-layout-7: false,
  $extend-layout-8: false,
  $extend-layout-9: false,
  $extend-layout-10: false
  ) {
  $layouts: compact($extend-layout-1,$extend-layout-2,$extend-layout-3,$extend-layout-4,$extend-layout-5,$extend-layout-6,$extend-layout-7,$extend-layout-8,$extend-layout-9,$extend-layout-10);
  $media: false;
  $columns: false;
  $function: false;
  @each $layout in $layouts {
    @if length($layout) == 1 {
      $layout: append($layout, nth($layouts, 2));
      $media: nth($layout, 1);
      $columns: nth($layout, 2);
      @extend .#{$aether-gridprefix}-#{$media}-#{$columns};
    } @else if length($layout) == 2 {
      $media: nth($layout, 1);
      $columns: nth($layout, 2);
      @extend .#{$aether-gridprefix}-#{$media}-#{$columns};
    }
    @else if length($layout) == 3 {
      $media: nth($layout, 1);
      $columns: nth($layout, 2);
      $function: nth($layout, 3);
      @extend .#{$aether-gridprefix}-#{$media}-#{$function}#{$columns};
    }
  }
}


// ---------------------------------------------------------------------------
// Aether Grids Background
//
// A wrapper for the compass "grid-background" mixin.
// Note: Sub-pixel rounding can lead to several pixels of variation between browsers.
@mixin aether-grid-background($columns:$aether-desktop-columns, $grid-width: $aether-desktop-grid-width) {
  @if $aether-show-grid-background {
    $col-width: col-width($columns,$grid-width);
    $gutter-width: gutter();
    $base-line-height: $aether-base-line-height;
    @if $aether-grid-type == fluid {
      $grid-background-force-fluid: true;
    }
    @include grid-background(
      $columns,
      $col-width,
      gutter(),
      $base-line-height,
      gutter($aether-gutter-width, half)
    );
  }
}